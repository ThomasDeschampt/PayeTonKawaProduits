{
  "info": {
    "name": "API Produits",
    "description": "Collection pour tester l'API des produits avec Prisma",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Produits",
      "item": [
        {
          "name": "Afficher tous les produits",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/produits/afficherAll",
              "host": ["{{base_url}}"],
              "path": ["api", "produits", "afficherAll"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response 'success' is true\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response has a data array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Each product has expected properties\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    jsonData.data.forEach(function(product) {",
                  "        pm.expect(product).to.have.property('id');",
                  "        pm.expect(product).to.have.property('created_at');",
                  "        pm.expect(product).to.have.property('nom');",
                  "        pm.expect(product).to.have.property('prix');",
                  "        pm.expect(product).to.have.property('description');",
                  "        pm.expect(product).to.have.property('stock');",
                  "        pm.expect(product).to.have.property('photo_url');",
                  "    });",
                  "});",
                  "",
                  "pm.test(\"Response has count property\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('count');",
                  "    pm.expect(jsonData.count).to.be.a('number');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Afficher un produit par UUID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/produits/afficher/:uuid",
              "host": ["{{base_url}}"],
              "path": ["api", "produits", "afficher", ":uuid"],
              "variable": [
                {
                  "key": "uuid",
                  "value": "9eca355c-1984-4601-a2bb-9a36a80f5187",
                  "description": "UUID du produit"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response 'success' is true\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Product has all required properties\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var product = jsonData.data;",
                  "    pm.expect(product).to.have.property('id');",
                  "    pm.expect(product).to.have.property('created_at');",
                  "    pm.expect(product).to.have.property('nom');",
                  "    pm.expect(product).to.have.property('prix');",
                  "    pm.expect(product).to.have.property('description');",
                  "    pm.expect(product).to.have.property('stock');",
                  "    pm.expect(product).to.have.property('photo_url');",
                  "});",
                  "",
                  "pm.test(\"Product UUID matches request\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var product = jsonData.data;",
                  "    pm.expect(product.id).to.equal(pm.variables.get('uuid'));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Afficher un produit avec UUID invalide",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/produits/afficher/invalid-uuid",
              "host": ["{{base_url}}"],
              "path": ["api", "produits", "afficher", "invalid-uuid"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response indicates invalid UUID\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.message).to.include('UUID');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Ajouter un produit",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"nom\": \"Café Arabica\",\n    \"description\": \"Café de haute qualité\",\n    \"prix\": 10.99,\n    \"stock\": 25,\n    \"photo_url\": \"https://example.com/images/cafe-arabica.jpg\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/produits",
              "host": ["{{base_url}}"],
              "path": ["api", "produits"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response 'success' is true\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Created product has all required properties\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var product = jsonData.data;",
                  "    pm.expect(product).to.have.property('id');",
                  "    pm.expect(product).to.have.property('created_at');",
                  "    pm.expect(product).to.have.property('nom');",
                  "    pm.expect(product).to.have.property('prix');",
                  "    pm.expect(product).to.have.property('description');",
                  "    pm.expect(product).to.have.property('stock');",
                  "    pm.expect(product).to.have.property('photo_url');",
                  "});",
                  "",
                  "pm.test(\"Created product matches request data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var product = jsonData.data;",
                  "    var requestData = JSON.parse(pm.request.body.raw);",
                  "    pm.expect(product.nom).to.equal(requestData.nom);",
                  "    pm.expect(product.prix).to.equal(requestData.prix);",
                  "    pm.expect(product.description).to.equal(requestData.description);",
                  "    pm.expect(product.stock).to.equal(requestData.stock);",
                  "    pm.expect(product.photo_url).to.equal(requestData.photo_url);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Ajouter un produit sans données requises",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"description\": \"Café de haute qualité\",\n    \"stock\": 25,\n    \"photo_url\": \"https://example.com/images/cafe-arabica.jpg\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/produits",
              "host": ["{{base_url}}"],
              "path": ["api", "produits"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response indicates missing required fields\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.message).to.include('requis');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Modifier un produit",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"nom\": \"Café Arabica Premium\",\n    \"description\": \"Café de haute qualité premium\",\n    \"prix\": 15.99,\n    \"stock\": 30,\n    \"photo_url\": \"https://example.com/images/cafe-arabica-premium.jpg\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/produits/modifier/:uuid",
              "host": ["{{base_url}}"],
              "path": ["api", "produits", "modifier", ":uuid"],
              "variable": [
                {
                  "key": "uuid",
                  "value": "9eca355c-1984-4601-a2bb-9a36a80f5187",
                  "description": "UUID du produit"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response 'success' is true\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Updated product has all required properties\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var product = jsonData.data;",
                  "    pm.expect(product).to.have.property('id');",
                  "    pm.expect(product).to.have.property('updated_at');",
                  "    pm.expect(product).to.have.property('nom');",
                  "    pm.expect(product).to.have.property('prix');",
                  "    pm.expect(product).to.have.property('description');",
                  "    pm.expect(product).to.have.property('stock');",
                  "    pm.expect(product).to.have.property('photo_url');",
                  "});",
                  "",
                  "pm.test(\"Updated product matches request data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var product = jsonData.data;",
                  "    var requestData = JSON.parse(pm.request.body.raw);",
                  "    pm.expect(product.nom).to.equal(requestData.nom);",
                  "    pm.expect(product.prix).to.equal(requestData.prix);",
                  "    pm.expect(product.description).to.equal(requestData.description);",
                  "    pm.expect(product.stock).to.equal(requestData.stock);",
                  "    pm.expect(product.photo_url).to.equal(requestData.photo_url);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Modifier un produit avec UUID invalide",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"nom\": \"Café Arabica Premium\",\n    \"description\": \"Café de haute qualité premium\",\n    \"prix\": 15.99,\n    \"stock\": 30,\n    \"photo_url\": \"https://example.com/images/cafe-arabica-premium.jpg\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/produits/modifier/invalid-uuid",
              "host": ["{{base_url}}"],
              "path": ["api", "produits", "modifier", "invalid-uuid"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response indicates invalid UUID\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.message).to.include('UUID');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Supprimer un produit",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/produits/supprimer/:uuid",
              "host": ["{{base_url}}"],
              "path": ["api", "produits", "supprimer", ":uuid"],
              "variable": [
                {
                  "key": "uuid",
                  "value": "9eca355c-1984-4601-a2bb-9a36a80f5187",
                  "description": "UUID du produit"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response 'success' is true\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Success message is correct\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.equal(\"Produit supprimé avec succès\");",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Supprimer un produit avec UUID invalide",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/produits/supprimer/invalid-uuid",
              "host": ["{{base_url}}"],
              "path": ["api", "produits", "supprimer", "invalid-uuid"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response indicates invalid UUID\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.message).to.include('UUID');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3001",
      "type": "string"
    },
    {
      "key": "token",
      "value": "your_jwt_token_here",
      "type": "string"
    }
  ]
}
