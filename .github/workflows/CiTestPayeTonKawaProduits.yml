name: CI de tests unitaires Node.js

on:
  push:
    branches:
      - main    # D√©clenche le workflow √† chaque push sur la branche 'main'
      - test # Si vous utilisez une branche de d√©veloppement
  pull_request:
    branches:
      - main    # D√©clenche pour les Pull Requests ciblant 'main'
      - test # Si vous utilisez une branche de d√©veloppement

jobs:
  test:
    runs-on: ubuntu-latest # Utilise la derni√®re version d'Ubuntu pour l'environnement d'ex√©cution

    steps:
    - name: üöÄ Cloner le code du d√©p√¥t
      uses: actions/checkout@v4 # Action pour r√©cup√©rer votre code depuis GitHub

    - name: ‚öôÔ∏è Configurer l'environnement Node.js
      uses: actions/setup-node@v4 # Action pour installer Node.js
      with:
        node-version: '20' # IMPORTANT : Assurez-vous que cette version de Node.js correspond √† celle de votre projet
        cache: 'npm'       # Active le cache pour les d√©pendances npm, ce qui acc√©l√®re les ex√©cutions futures

    - name: üì¶ Installer les d√©pendances npm
      run: npm ci # 'npm ci' est pr√©f√©r√© √† 'npm install' dans les CI pour des builds reproductibles et plus rapides

    - name: üß™ Lancer les tests unitaires avec Jest
      run: npm test # Cette commande ex√©cute le script 'test' d√©fini dans votre package.json (qui devrait √™tre 'jest')
      env:
        # Les variables d'environnement n√©cessaires pour vos tests (m√™me si Prisma est mock√© ou si elles sont lues par votre code)
        # sont inject√©es ici √† partir des secrets GitHub (si ce sont des secrets) ou d√©finies directement.
        # Les noms des variables (DATABASE_URL, JWT_SECRET, JWT_EXPIRE) doivent correspondre EXACTEMENT
        # aux noms que vous avez d√©finis dans les secrets de votre d√©p√¥t GitHub.
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        JWT_EXPIRE: ${{ secrets.JWT_EXPIRE }}
        PORT: 3000 # Le port peut aussi √™tre n√©cessaire si vos tests d√©marrent un petit serveur ou simulent des appels HTTP
