name: Build et Lancement du Service Backend JS

on:
  push:
    branches:
      - main    # D√©clenche le workflow √† chaque push sur la branche 'main'
      - develop # Si vous utilisez une branche de d√©veloppement, le d√©clenche aussi
  pull_request:
    branches:
      - main    # D√©clenche pour les Pull Requests ciblant 'main'
      - develop # Si vous utilisez une branche de d√©veloppement, le d√©clenche aussi

jobs:
  build_and_start:
    runs-on: ubuntu-latest # Utilise la derni√®re version d'Ubuntu pour l'environnement d'ex√©cution

    steps:
    - name: üöÄ Cloner le code du d√©p√¥t
      uses: actions/checkout@v4 # Action pour r√©cup√©rer votre code depuis GitHub

    - name: ‚öôÔ∏è Configurer l'environnement Node.js
      uses: actions/setup-node@v4 # Action pour installer Node.js
      with:
        node-version: '20' # IMPORTANT : Assurez-vous que cette version de Node.js correspond √† celle de votre projet
        cache: 'npm'       # Active le cache pour les d√©pendances npm, ce qui acc√©l√®re les ex√©cutions futures

    - name: üì¶ Installer les d√©pendances npm
      run: npm ci # 'npm ci' est pr√©f√©r√© √† 'npm install' dans les CI pour des builds reproductibles et plus rapides

    - name: üèóÔ∏è Lancer le build du projet (si applicable)
      # Cette √©tape est optionnelle et d√©pend de votre projet.
      # Si votre projet est un backend Node.js pur sans √©tape de compilation (pas de TypeScript, pas de frontend √† compiler),
      # vous pouvez supprimer ou commenter cette √©tape.
      # Si vous avez un script 'build' dans votre package.json (ex: pour TypeScript, ou un frontend), d√©commentez ceci:
      # run: npm run build
      run: echo "Pas de commande de build sp√©cifi√©e pour ce projet. Ignorant l'√©tape de build." # Message par d√©faut si pas de build

    - name: üèÅ D√©marrer le serveur et v√©rifier son accessibilit√©
      run: |
        echo "D√©marrage du serveur via npm start..."
        # Lancer le serveur en arri√®re-plan. Le '&' est crucial pour ne pas bloquer le workflow.
        # Utilisez 'npm start' ou 'npm run start:prod' si vous avez un script d√©di√© pour la production/CI
        npm start &

        echo "Attente de 10 secondes pour le d√©marrage complet du serveur..."
        sleep 10 # Ajustez si votre serveur prend plus ou moins de temps √† d√©marrer

        echo "V√©rification de l'accessibilit√© du serveur sur http://localhost:${{ env.PORT }}/api"
        # Utilise curl pour tester la disponibilit√©.
        # --fail: Fait √©chouer la commande si la r√©ponse HTTP est >= 400 ou n'est pas 2xx/3xx.
        # Remplacez '/api' par le chemin de votre endpoint API principal ou un endpoint de "health check".
        curl --fail http://localhost:${{ env.PORT }}/api

        echo "Serveur d√©marr√© et API accessible avec succ√®s !"
      env:
        # Les variables d'environnement sont inject√©es ici √† partir des secrets GitHub
        # Les noms des variables (DATABASE_URL, JWT_SECRET, JWT_EXPIRE) doivent correspondre EXACTEMENT
        # aux noms que vous avez d√©finis dans les secrets de votre d√©p√¥t GitHub (Repository secrets).
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        JWT_EXPIRE: ${{ secrets.JWT_EXPIRE }}
        PORT: 3000 # D√©finissez le port sur lequel votre serveur √©coute. Utilisez un nombre, pas une cha√Æne.
        # Ajoutez toute autre variable d'environnement n√©cessaire au d√©marrage de votre application.
